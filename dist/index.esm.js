var g=(r=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(r,{get:(t,e)=>(typeof require!="undefined"?require:t)[e]}):r)(function(r){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+r+'" is not supported')});import D from"jszip";import{DOMParser as w,XMLSerializer as R}from"@xmldom/xmldom";var p=async function(r,t){let e=r.map(async n=>{let i=await n.file("word/styles.xml").async("string"),l=new w().parseFromString(i,"text/xml").documentElement.childNodes;for(let o=0;o<l.length;o++)if(l[o].nodeType===1){let a=l[o].getAttribute("w:styleId");t[a]||(t[a]=l[o].cloneNode(!0))}});return Promise.all(e)},f=async function(r,t){let e=r.map(async n=>{let i=await n.file("word/styles.xml").async("string"),s=new w().parseFromString(i,"text/xml"),l=new R,o=s.documentElement.cloneNode();for(let d in t)o.appendChild(t[d]);let a=i.indexOf("<w:styles");i=i.replace(i.slice(a),l.serializeToString(o)),n.file("word/styles.xml",i)});return Promise.all(e)};var y=async function(r,t){let e=await r.file("word/styles.xml").async("string"),n=e.indexOf("<w:style "),i=e.indexOf("</w:styles>");e=e.replace(e.slice(n,i),t.join("")),r.file("word/styles.xml",e)};import E from"jszip";import{DOMParser as j,XMLSerializer as J}from"@xmldom/xmldom";async function u(r,t){for(let e of r){let i=(await new E().loadAsync(e)).folder("word/media");i&&i.forEach((s,l)=>{t[s]=l})}}async function x(r,t,e){let n=r.folder("word/media");if(!n)throw new Error("Media folder not found in the zip");for(let[i,s]of Object.entries(t)){let l=await s.async("blob");n.file(i,l)}}import{DOMParser as c,XMLSerializer as h}from"@xmldom/xmldom";var b=function(r,t){let e=r.map(async n=>{let i=await n.file("[Content_Types].xml").async("string"),l=new c().parseFromString(i,"text/xml").getElementsByTagName("Types")[0].childNodes;for(let o in l)if(/^\d+$/.test(o)&&l[o].getAttribute){let a=l[o].getAttribute("ContentType");t[a]||(t[a]=l[o].cloneNode())}});return Promise.all(e)},S=async function(r,t){let e=r.map(async n=>{let i=await n.file("word/_rels/document.xml.rels").async("string"),l=new c().parseFromString(i,"text/xml").documentElement.childNodes;for(let o=0;o<l.length;o++)if(l[o].nodeType===1){let a=l[o].getAttribute("Id");t[a]||(t[a]=l[o].cloneNode())}});return Promise.all(e)},_=async function(r,t){let e=await r.file("[Content_Types].xml").async("string"),n=new c().parseFromString(e,"text/xml"),i=new h,s=n.documentElement.cloneNode();for(let o in t)s.appendChild(t[o]);let l=e.indexOf("<Types");e=e.replace(e.slice(l),i.serializeToString(s)),r.file("[Content_Types].xml",e)},N=async function(r,t){let e=await r.file("word/_rels/document.xml.rels").async("string"),n=new c().parseFromString(e,"text/xml"),i=new h,s=n.documentElement.cloneNode();for(let o in t)s.appendChild(t[o]);let l=e.indexOf("<Relationships");e=e.replace(e.slice(l),i.serializeToString(s)),r.file("word/_rels/document.xml.rels",e)};import"jszip";import{DOMParser as T,XMLSerializer as z}from"@xmldom/xmldom";async function I(r,t){let e=r.map(async n=>{let i=await n.file("word/numbering.xml").async("string"),l=new T().parseFromString(i,"text/xml").documentElement.childNodes;for(let o=0;o<l.length;o++)if(l[o].nodeType===1){let a=l[o].getAttribute("w:abstractNumId");t[a]||(t[a]=l[o].cloneNode(!0))}t.push(i)});return Promise.all(e)}async function M(r,t){let e=r.map(async n=>{let i=await n.file("word/numbering.xml").async("string"),s=new T().parseFromString(i,"text/xml"),l=new z,o=s.documentElement.cloneNode();for(let d in t)o.appendChild(t[d]);let a=i.indexOf("<w:numbering");i=i.replace(i.slice(a),l.serializeToString(o)),n.file("word/numbering.xml",i)});return Promise.all(e)}async function O(r,t){let e=r.file("word/numbering.xml");if(!e)throw new Error("Numbering file not found in the zip");let n=await e.async("string"),i=n.indexOf("<w:abstractNum "),s=n.indexOf("</w:numbering>");n=n.replace(n.slice(i,s),t.join("")),r.file("word/numbering.xml",n)}var P=typeof window!="undefined"&&typeof window.document!="undefined",K=P?window.XMLSerializer:g("@xmldom/xmldom").XMLSerializer,Q=P?window.DOMParser:g("@xmldom/xmldom").DOMParser,m=class{constructor(){this._body=[],this._header=[],this._footer=[],this._pageBreak=!0,this._Basestyle="source",this._style=[],this._numbering=[],this._files=[],this._contentTypes={},this._media={},this._rel={},this._builder=this._body}async initialize(t={},e){e=e||[],this._pageBreak=typeof t.pageBreak!="undefined"?!!t.pageBreak:!0,this._Basestyle=t.style||"source";for(let n of e){let i=await new D().loadAsync(n);this._files.push(i)}this._files.length>0&&await this.mergeBody(this._files)}insertPageBreak(){let t='<w:p>                     <w:r>                         <w:br w:type="page"/>                     </w:r>                 </w:p>';this._builder.push(t)}insertSectionBreak(){let t='<w:p>                     <w:pPr>                         <w:sectPr>                             <w:type w:val="nextPage"/>                         </w:sectPr>                     </w:pPr>                 </w:p>';this._builder.push(t)}insertRaw(t){this._builder.push(t)}async mergeBody(t){this._builder=this._body,await b(t,this._contentTypes),await u(t,this._media),await S(t,this._rel),await I(t,this._numbering),await M(t,this._numbering),await p(t,this._style),await f(t,this._style);let e=t.map(async(n,i)=>{let s=await n.file("word/document.xml").async("string");s=s.substring(s.indexOf("<w:body>")+8),s=s.substring(0,s.indexOf("</w:body>")),s=s.substring(0,s.lastIndexOf("<w:sectPr")),this.insertRaw(s),this._pageBreak&&i<t.length-1&&this.insertSectionBreak()});return Promise.all(e).then(()=>{})}async save(t){let e=this._files[0];if(!e||!e.file)throw new Error("JSZip file not properly loaded");let n=await e.file("word/document.xml").async("string"),i=n.indexOf("<w:body>")+8,s=n.lastIndexOf("<w:sectPr");return n=n.replace(n.slice(i,s),this._body.join("")),await _(e,this._contentTypes),await x(e,this._media,this._files),await N(e,this._rel),await O(e,this._numbering),await y(e,this._style),e.file("word/document.xml",n),await e.generateAsync({type:t,compression:"DEFLATE",compressionOptions:{level:4}})}},U=m;export{U as default};
//# sourceMappingURL=index.esm.js.map

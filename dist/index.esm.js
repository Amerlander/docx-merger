var g=(s=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(s,{get:(e,t)=>(typeof require!="undefined"?require:e)[t]}):s)(function(s){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+s+'" is not supported')});import D from"jszip";import{DOMParser as w,XMLSerializer as R}from"@xmldom/xmldom";var p=async function(s,e){let t=s.map(async i=>{let n=await i.file("word/styles.xml").async("string"),o=new w().parseFromString(n,"text/xml").documentElement.childNodes;for(let r=0;r<o.length;r++)if(o[r].nodeType===1){let a=o[r].getAttribute("w:styleId");e[a]||(e[a]=o[r].cloneNode(!0))}});return Promise.all(t)},f=async function(s,e){let t=s.map(async i=>{let n=await i.file("word/styles.xml").async("string"),l=new w().parseFromString(n,"text/xml"),o=new R,r=l.documentElement.cloneNode();for(let d in e)r.appendChild(e[d]);let a=n.indexOf("<w:styles");n=n.replace(n.slice(a),o.serializeToString(r)),i.file("word/styles.xml",n)});return Promise.all(t)};var y=async function(s,e){let t=await s.file("word/styles.xml").async("string"),i=t.indexOf("<w:style "),n=t.indexOf("</w:styles>");t=t.replace(t.slice(i,n),e.join("")),s.file("word/styles.xml",t)};import E from"jszip";import{DOMParser as j,XMLSerializer as J}from"@xmldom/xmldom";async function u(s,e){for(let t of s){let n=(await new E().loadAsync(t)).folder("word/media");n&&n.forEach((l,o)=>{e[l]=o})}}async function x(s,e,t){let i=s.folder("word/media");if(!i)throw new Error("Media folder not found in the zip");for(let[n,l]of Object.entries(e)){let o=await l.async("blob");i.file(n,o)}}import{DOMParser as c,XMLSerializer as h}from"@xmldom/xmldom";var b=function(s,e){let t=s.map(async i=>{let n=await i.file("[Content_Types].xml").async("string"),o=new c().parseFromString(n,"text/xml").getElementsByTagName("Types")[0].childNodes;for(let r in o)if(/^\d+$/.test(r)&&o[r].getAttribute){let a=o[r].getAttribute("ContentType");e[a]||(e[a]=o[r].cloneNode())}});return Promise.all(t)},S=async function(s,e){let t=s.map(async i=>{let n=await i.file("word/_rels/document.xml.rels").async("string"),o=new c().parseFromString(n,"text/xml").documentElement.childNodes;for(let r=0;r<o.length;r++)if(o[r].nodeType===1){let a=o[r].getAttribute("Id");e[a]||(e[a]=o[r].cloneNode())}});return Promise.all(t)},_=async function(s,e){let t=await s.file("[Content_Types].xml").async("string"),i=new c().parseFromString(t,"text/xml"),n=new h,l=i.documentElement.cloneNode();for(let r in e)l.appendChild(e[r]);let o=t.indexOf("<Types");t=t.replace(t.slice(o),n.serializeToString(l)),s.file("[Content_Types].xml",t)},N=async function(s,e){let t=await s.file("word/_rels/document.xml.rels").async("string"),i=new c().parseFromString(t,"text/xml"),n=new h,l=i.documentElement.cloneNode();for(let r in e)l.appendChild(e[r]);let o=t.indexOf("<Relationships");t=t.replace(t.slice(o),n.serializeToString(l)),s.file("word/_rels/document.xml.rels",t)};import"jszip";import{DOMParser as T,XMLSerializer as z}from"@xmldom/xmldom";async function I(s,e){let t=s.map(async i=>{let n=await i.file("word/numbering.xml").async("string"),o=new T().parseFromString(n,"text/xml").documentElement.childNodes;for(let r=0;r<o.length;r++)if(o[r].nodeType===1){let a=o[r].getAttribute("w:abstractNumId");e[a]||(e[a]=o[r].cloneNode(!0))}e.push(n)});return Promise.all(t)}async function M(s,e){let t=s.map(async i=>{let n=await i.file("word/numbering.xml").async("string"),l=new T().parseFromString(n,"text/xml"),o=new z,r=l.documentElement.cloneNode();for(let d in e)r.appendChild(e[d]);let a=n.indexOf("<w:numbering");n=n.replace(n.slice(a),o.serializeToString(r)),i.file("word/numbering.xml",n)});return Promise.all(t)}async function O(s,e){let t=s.file("word/numbering.xml");if(!t)throw new Error("Numbering file not found in the zip");let i=await t.async("string"),n=i.indexOf("<w:abstractNum "),l=i.indexOf("</w:numbering>");i=i.replace(i.slice(n,l),e.join("")),s.file("word/numbering.xml",i)}var P=typeof window!="undefined"&&typeof window.document!="undefined",K=P?window.XMLSerializer:g("@xmldom/xmldom").XMLSerializer,Q=P?window.DOMParser:g("@xmldom/xmldom").DOMParser,m=class{constructor(){this._body=[],this._header=[],this._footer=[],this._pageBreak=!0,this._Basestyle="source",this._style=[],this._numbering=[],this._files=[],this._contentTypes={},this._media={},this._rel={},this._builder=this._body}async initialize(e={},t){t=t||[],this._pageBreak=typeof e.pageBreak!="undefined"?!!e.pageBreak:!0,this._Basestyle=e.style||"source";for(let i of t){let n=await new D().loadAsync(i);this._files.push(n)}this._files.length>0&&await this.mergeBody(this._files)}insertPageBreak(){let e='<w:p>                     <w:r>                         <w:br w:type="page"/>                     </w:r>                 </w:p>';this._builder.push(e)}insertSectionBreak(){let e='<w:p>                     <w:pPr>                         <w:sectPr>                             <w:type w:val="nextPage"/>                         </w:sectPr>                     </w:pPr>                 </w:p>';this._builder.push(e)}insertRaw(e){this._builder.push(e)}async mergeBody(e){this._builder=this._body,await b(e,this._contentTypes),await u(e,this._media),await S(e,this._rel),await I(e,this._numbering),await M(e,this._numbering),await p(e,this._style),await f(e,this._style);let t=e.map(async(i,n)=>{let l=await i.file("word/document.xml").async("string");l=l.substring(l.indexOf("<w:body>")+8),l=l.substring(0,l.indexOf("</w:body>")),l=l.substring(0,l.lastIndexOf("<w:sectPr")),this.insertRaw(l),this._pageBreak&&n<e.length-1&&this.insertSectionBreak()});return Promise.all(t).then(()=>{})}async save(e,t){let i=this._files[0];if(!i||!i.file)throw new Error("JSZip file not properly loaded");let n=await i.file("word/document.xml").async("string"),l=n.indexOf("<w:body>")+8,o=n.lastIndexOf("<w:sectPr");n=n.replace(n.slice(l,o),this._body.join("")),await _(i,this._contentTypes),await x(i,this._media,this._files),await N(i,this._rel),await O(i,this._numbering),await y(i,this._style),i.file("word/document.xml",n);let r=await i.generateAsync({type:e,compression:"DEFLATE",compressionOptions:{level:4}});return t&&t(r),r}},U=m;export{U as default};
//# sourceMappingURL=index.esm.js.map

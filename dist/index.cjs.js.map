{
  "version": 3,
  "sources": ["../src/merge-styles.js", "../src/merge-media.js", "../src/merge-relations-and-content-type.js", "../src/merge-bullets-numberings.js", "../src/index.js"],
  "sourcesContent": ["const {XMLSerializer} = require('@xmldom/xmldom');\r\nconst {DOMParser} = require('@xmldom/xmldom');\r\n\r\nconst prepareStyles = function(files, style) {\r\n    const serializer = new XMLSerializer();\r\n\r\n    const prepare = files.map(async function(zip, index) {\r\n        let xmlString = await zip.file('word/styles.xml').async('string');\r\n        let xml = new DOMParser().parseFromString(xmlString, 'text/xml');\r\n        const nodes = xml.getElementsByTagName('w:style');\r\n\r\n        for (const node in nodes) {\r\n            if (/^\\d+$/.test(node) && nodes[node].getAttribute) {\r\n                const styleId = nodes[node].getAttribute('w:styleId');\r\n                nodes[node].setAttribute('w:styleId', styleId + '_' + index);\r\n                const basedonStyle = nodes[node].getElementsByTagName('w:basedOn')[0];\r\n                if (basedonStyle) {\r\n                    const basedonStyleId = basedonStyle.getAttribute('w:val');\r\n                    basedonStyle.setAttribute('w:val', basedonStyleId + '_' + index);\r\n                }\r\n\r\n                const w_next = nodes[node].getElementsByTagName('w:next')[0];\r\n                if (w_next) {\r\n                    const w_next_ID = w_next.getAttribute('w:val');\r\n                    w_next.setAttribute('w:val', w_next_ID + '_' + index);\r\n                }\r\n\r\n                const w_link = nodes[node].getElementsByTagName('w:link')[0];\r\n                if (w_link) {\r\n                    const w_link_ID = w_link.getAttribute('w:val');\r\n                    w_link.setAttribute('w:val', w_link_ID + '_' + index);\r\n                }\r\n\r\n                const numId = nodes[node].getElementsByTagName('w:numId')[0];\r\n                if (numId) {\r\n                    const numId_ID = numId.getAttribute('w:val');\r\n                    numId.setAttribute('w:val', numId_ID + index);\r\n                }\r\n\r\n                await updateStyleRel_Content(zip, index, styleId);\r\n            }\r\n        }\r\n\r\n        const startIndex = xmlString.indexOf('<w:styles ');\r\n        xmlString = xmlString.replace(xmlString.slice(startIndex), serializer.serializeToString(xml.documentElement));\r\n\r\n        zip.file('word/styles.xml', xmlString);\r\n    });\r\n\r\n    return Promise.all(prepare);\r\n};\r\n\r\nconst mergeStyles = async function(files, _styles) {\r\n    const merge = files.map(async function(zip) {\r\n        let xmlString = await zip.file('word/styles.xml').async('string');\r\n        xmlString = xmlString.substring(xmlString.indexOf('<w:style '), xmlString.indexOf('</w:styles'));\r\n        _styles.push(xmlString);\r\n    });\r\n    return Promise.all(merge);\r\n};\r\n\r\nconst updateStyleRel_Content = async function(zip, fileIndex, styleId) {\r\n    let xmlString = await zip.file('word/document.xml').async('string');\r\n    xmlString = xmlString.replace(new RegExp('w:val=\"' + styleId + '\"', 'g'), 'w:val=\"' + styleId + '_' + fileIndex + '\"');\r\n    zip.file('word/document.xml', xmlString);\r\n};\r\n\r\nconst generateStyles = async function(zip, _style) {\r\n    let xmlString = await zip.file('word/styles.xml').async('string');\r\n    const startIndex = xmlString.indexOf('<w:style ');\r\n    const endIndex = xmlString.indexOf('</w:styles>');\r\n\r\n    xmlString = xmlString.replace(xmlString.slice(startIndex, endIndex), _style.join(''));\r\n\r\n    zip.file('word/styles.xml', xmlString);\r\n};\r\n\r\nmodule.exports = {\r\n    mergeStyles: mergeStyles,\r\n    prepareStyles: prepareStyles,\r\n    updateStyleRel_Content: updateStyleRel_Content,\r\n    generateStyles: generateStyles\r\n};", "const {XMLSerializer} = require('@xmldom/xmldom');\r\nconst {DOMParser} = require('@xmldom/xmldom');\r\n\r\nconst prepareMediaFiles = async function(files, media) {\r\n    let gCount = 1;\r\n    const prepare = files.map(async function(zip, index) {\r\n        const medFiles = zip.folder('word/media').files;\r\n        for (const mfile in medFiles) {\r\n            if (/^word\\/media/.test(mfile) && mfile.length > 11) {\r\n                const count = gCount++;\r\n                media[count] = {};\r\n                media[count].oldTarget = mfile;\r\n                media[count].newTarget = mfile.replace(/[0-9]/, '_' + count).replace('word/', \"\");\r\n                media[count].fileIndex = index;\r\n                \r\n                await updateMediaRelations(zip, count, media);\r\n                await updateMediaContent(zip, count, media);\r\n            }\r\n        }\r\n    });\r\n    return Promise.all(prepare);\r\n};\r\n\r\nconst updateMediaRelations = async function(zip, count, _media) {\r\n    let xmlString = await zip.file('word/_rels/document.xml.rels').async('string');\r\n    let xml = new DOMParser().parseFromString(xmlString, 'text/xml');\r\n\r\n    const childNodes = xml.getElementsByTagName('Relationships')[0].childNodes;\r\n    const serializer = new XMLSerializer();\r\n\r\n    for (const node in childNodes) {\r\n        if (/^\\d+$/.test(node) && childNodes[node].getAttribute) {\r\n            const target = childNodes[node].getAttribute('Target');\r\n            if ('word/' + target === _media[count].oldTarget) {\r\n\r\n                _media[count].oldRelID = childNodes[node].getAttribute('Id');\r\n\r\n                childNodes[node].setAttribute('Target', _media[count].newTarget);\r\n                childNodes[node].setAttribute('Id', _media[count].oldRelID + '_' + count);\r\n            }\r\n        }\r\n    }\r\n\r\n    const startIndex = xmlString.indexOf('<Relationships');\r\n    xmlString = xmlString.replace(xmlString.slice(startIndex), serializer.serializeToString(xml.documentElement));\r\n\r\n    zip.file('word/_rels/document.xml.rels', xmlString);\r\n};\r\n\r\nconst updateMediaContent = async function(zip, count, _media) {\r\n    let xmlString = await zip.file('word/document.xml').async('string');\r\n    xmlString = xmlString.replace(new RegExp(_media[count].oldRelID + '\"', 'g'), _media[count].oldRelID + '_' + count + '\"');\r\n    zip.file('word/document.xml', xmlString);\r\n};\r\n\r\nconst copyMediaFiles = async function(base, _media, _files) {\r\n    for (const media in _media) {\r\n        const content = await _files[_media[media].fileIndex].file(_media[media].oldTarget).async('uint8array');\r\n        base.file('word/' + _media[media].newTarget, content);\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    prepareMediaFiles: prepareMediaFiles,\r\n    updateMediaRelations: updateMediaRelations,\r\n    updateMediaContent: updateMediaContent,\r\n    copyMediaFiles: copyMediaFiles\r\n};", "const {XMLSerializer} = require('@xmldom/xmldom');\r\nconst {DOMParser} = require('@xmldom/xmldom');\r\n\r\n\r\nconst mergeContentTypes = function(files, _contentTypes) {\r\n    const merge = files.map(async (zip) => {\r\n        const xmlString = await zip.file('[Content_Types].xml').async('string');\r\n        const xml = new DOMParser().parseFromString(xmlString, 'text/xml');\r\n\r\n        const childNodes = xml.getElementsByTagName('Types')[0].childNodes;\r\n\r\n        for (const node in childNodes) {\r\n            if (/^\\d+$/.test(node) && childNodes[node].getAttribute) {\r\n                const contentType = childNodes[node].getAttribute('ContentType');\r\n                if (!_contentTypes[contentType])\r\n                    _contentTypes[contentType] = childNodes[node].cloneNode();\r\n            }\r\n        }\r\n    });\r\n    return Promise.all(merge);\r\n};\r\n\r\nconst mergeRelations = function(files, _rel) {\r\n    const merge = files.map(async (zip) => {\r\n        const xmlString = await zip.file('word/_rels/document.xml.rels').async('string');\r\n        const xml = new DOMParser().parseFromString(xmlString, 'text/xml');\r\n\r\n        const childNodes = xml.getElementsByTagName('Relationships')[0].childNodes;\r\n\r\n        for (const node in childNodes) {\r\n            if (/^\\d+$/.test(node) && childNodes[node].getAttribute) {\r\n                const Id = childNodes[node].getAttribute('Id');\r\n                if (!_rel[Id])\r\n                    _rel[Id] = childNodes[node].cloneNode();\r\n            }\r\n        }\r\n    });\r\n    return Promise.all(merge);\r\n};\r\n\r\nconst generateContentTypes = async function(zip, _contentTypes) {\r\n    let xmlString = await zip.file('[Content_Types].xml').async('string');\r\n    const xml = new DOMParser().parseFromString(xmlString, 'text/xml');\r\n    const serializer = new XMLSerializer();\r\n\r\n    const types = xml.documentElement.cloneNode();\r\n\r\n    for (const node in _contentTypes) {\r\n        types.appendChild(_contentTypes[node]);\r\n    }\r\n\r\n    const startIndex = xmlString.indexOf('<Types');\r\n    xmlString = xmlString.replace(xmlString.slice(startIndex), serializer.serializeToString(types));\r\n\r\n    zip.file('[Content_Types].xml', xmlString);\r\n};\r\n\r\nconst generateRelations = async function(zip, _rel) {\r\n    let xmlString = await zip.file('word/_rels/document.xml.rels').async('string');\r\n    const xml = new DOMParser().parseFromString(xmlString, 'text/xml');\r\n    const serializer = new XMLSerializer();\r\n\r\n    const types = xml.documentElement.cloneNode();\r\n\r\n    for (const node in _rel) {\r\n        types.appendChild(_rel[node]);\r\n    }\r\n\r\n    const startIndex = xmlString.indexOf('<Relationships');\r\n    xmlString = xmlString.replace(xmlString.slice(startIndex), serializer.serializeToString(types));\r\n\r\n    zip.file('word/_rels/document.xml.rels', xmlString);\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    mergeContentTypes: mergeContentTypes,\r\n    mergeRelations: mergeRelations,\r\n    generateContentTypes: generateContentTypes,\r\n    generateRelations: generateRelations\r\n};", "const {XMLSerializer} = require('@xmldom/xmldom');\r\nconst {DOMParser} = require('@xmldom/xmldom');\r\n\r\n\r\nconst prepareNumbering = function(files) {\r\n    const serializer = new XMLSerializer();\r\n\r\n    const prepare = files.map(async function(zip, index) {\r\n        const xmlBin = zip.file('word/numbering.xml');\r\n        if (!xmlBin) {\r\n            return;\r\n        }\r\n        let xmlString = await xmlBin.async('string');\r\n        const xml = new DOMParser().parseFromString(xmlString, 'text/xml');\r\n        const nodes = xml.getElementsByTagName('w:abstractNum');\r\n\r\n        for (const node in nodes) {\r\n            if (/^\\d+$/.test(node) && nodes[node].getAttribute) {\r\n                const absID = nodes[node].getAttribute('w:abstractNumId');\r\n                nodes[node].setAttribute('w:abstractNumId', absID + index);\r\n                const pStyles = nodes[node].getElementsByTagName('w:pStyle');\r\n                for (const pStyle in pStyles) {\r\n                    if (pStyles[pStyle].getAttribute) {\r\n                        const pStyleId = pStyles[pStyle].getAttribute('w:val');\r\n                        pStyles[pStyle].setAttribute('w:val', pStyleId + '_' + index);\r\n                    }\r\n                }\r\n                const numStyleLinks = nodes[node].getElementsByTagName('w:numStyleLink');\r\n                for (const numstyleLink in numStyleLinks) {\r\n                    if (numStyleLinks[numstyleLink].getAttribute) {\r\n                        const styleLinkId = numStyleLinks[numstyleLink].getAttribute('w:val');\r\n                        numStyleLinks[numstyleLink].setAttribute('w:val', styleLinkId + '_' + index);\r\n                    }\r\n                }\r\n\r\n                const styleLinks = nodes[node].getElementsByTagName('w:styleLink');\r\n                for (const styleLink in styleLinks) {\r\n                    if (styleLinks[styleLink].getAttribute) {\r\n                        const styleLinkId = styleLinks[styleLink].getAttribute('w:val');\r\n                        styleLinks[styleLink].setAttribute('w:val', styleLinkId + '_' + index);\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        const numNodes = xml.getElementsByTagName('w:num');\r\n\r\n        for (const node in numNodes) {\r\n            if (/^\\d+$/.test(node) && numNodes[node].getAttribute) {\r\n                const ID = numNodes[node].getAttribute('w:numId');\r\n                numNodes[node].setAttribute('w:numId', ID + index);\r\n                const absrefID = numNodes[node].getElementsByTagName('w:abstractNumId');\r\n                for (const i in absrefID) {\r\n                    if (absrefID[i].getAttribute) {\r\n                        const iId = absrefID[i].getAttribute('w:val');\r\n                        absrefID[i].setAttribute('w:val', iId + index);\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n\r\n        const startIndex = xmlString.indexOf(\"<w:numbering \");\r\n        xmlString = xmlString.replace(xmlString.slice(startIndex), serializer.serializeToString(xml.documentElement));\r\n\r\n        zip.file(\"word/numbering.xml\", xmlString);\r\n    });\r\n    return Promise.all(prepare);\r\n};\r\n\r\nconst mergeNumbering = function(files, _numbering) {\r\n    const merge = files.map(async function(zip) {\r\n        const xmlBin = zip.file('word/numbering.xml');\r\n        if (!xmlBin) {\r\n            return;\r\n        }\r\n        let xmlString = await xmlBin.async('string');\r\n        xmlString = xmlString.substring(xmlString.indexOf(\"<w:abstractNum \"), xmlString.indexOf(\"</w:numbering\"));\r\n        _numbering.push(xmlString);\r\n    });\r\n    return Promise.all(merge);\r\n};\r\n\r\nconst generateNumbering = async function(zip, _numbering) {\r\n    const xmlBin = zip.file('word/numbering.xml');\r\n    if (!xmlBin) {\r\n        return;\r\n    }\r\n    let xmlString = await xmlBin.async('string');\r\n    const startIndex = xmlString.indexOf(\"<w:abstractNum \");\r\n    const endIndex = xmlString.indexOf(\"</w:numbering>\");\r\n\r\n    xmlString = xmlString.replace(xmlString.slice(startIndex, endIndex), _numbering.join(''));\r\n\r\n    zip.file(\"word/numbering.xml\", xmlString);\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    prepareNumbering: prepareNumbering,\r\n    mergeNumbering: mergeNumbering,\r\n    generateNumbering: generateNumbering\r\n};", "import JSZip from 'jszip';\r\nimport Style from './merge-styles';\r\nimport Media from './merge-media';\r\nimport RelContentType from './merge-relations-and-content-type';\r\nimport bulletsNumbering from './merge-bullets-numberings';\r\n\r\nclass DocxMerger {\r\n    constructor () {\r\n        this._body = [];\r\n        this._header = [];\r\n        this._footer = [];\r\n        this._pageBreak = true;\r\n        this._Basestyle = 'source';\r\n        this._style = [];\r\n        this._numbering = [];\r\n        this._files = [];\r\n        this._contentTypes = {};\r\n        this._media = {};\r\n        this._rel = {};\r\n        this._builder = this._body;\r\n    }\r\n\r\n    async initialize(options, files) {\r\n        files = files || [];\r\n        this._pageBreak = typeof options.pageBreak !== 'undefined' ? !!options.pageBreak : true;\r\n        this._Basestyle = options.style || 'source';\r\n\r\n        for(const file of files) {\r\n            this._files.push(await new JSZip().loadAsync(file));\r\n        }\r\n        if(this._files.length > 0) {\r\n            await this.mergeBody(this._files)\r\n        }\r\n    }\r\n\r\n    insertPageBreak = function() {\r\n        const pb = '<w:p> \\\r\n\t\t\t\t\t<w:r> \\\r\n\t\t\t\t\t\t<w:br w:type=\"page\"/> \\\r\n\t\t\t\t\t</w:r> \\\r\n\t\t\t\t</w:p>';\r\n\r\n        this._builder.push(pb);\r\n    };\r\n\r\n    insertRaw = function(xml) {\r\n        this._builder.push(xml);\r\n    };\r\n\r\n    /**\r\n     * @param {Buffer[]} files \r\n     * @returns {Promise<void>}\r\n     */\r\n    async mergeBody(files) {\r\n        this._builder = this._body;\r\n\r\n        await RelContentType.mergeContentTypes(files, this._contentTypes);\r\n        await Media.prepareMediaFiles(files, this._media);\r\n        await RelContentType.mergeRelations(files, this._rel);\r\n\r\n        await bulletsNumbering.prepareNumbering(files);\r\n        await bulletsNumbering.mergeNumbering(files, this._numbering);\r\n        await Style.prepareStyles(files, this._style);\r\n        await Style.mergeStyles(files, this._style);\r\n\r\n        const merge = files.map(async(zip, index) => {\r\n            let xmlString = await zip.file('word/document.xml').async('string');\r\n            xmlString = xmlString.substring(xmlString.indexOf('<w:body>') + 8);\r\n            xmlString = xmlString.substring(0, xmlString.indexOf('</w:body>'));\r\n            xmlString = xmlString.substring(0, xmlString.lastIndexOf('<w:sectPr'));\r\n\r\n            this.insertRaw(xmlString);\r\n            if (this._pageBreak && index < files.length-1)\r\n                this.insertPageBreak();\r\n        });\r\n        return Promise.all(merge).then(() => {});\r\n    };\r\n\r\n    async save(type) {\r\n        const zip = this._files[0];\r\n\r\n        let xmlString = await zip.file('word/document.xml').async('string');\r\n\r\n        const startIndex = xmlString.indexOf('<w:body>') + 8;\r\n        const endIndex = xmlString.lastIndexOf('<w:sectPr');\r\n\r\n        xmlString = xmlString.replace(xmlString.slice(startIndex, endIndex), this._body.join(''));\r\n\r\n        await RelContentType.generateContentTypes(zip, this._contentTypes);\r\n        await Media.copyMediaFiles(zip, this._media, this._files);\r\n        await RelContentType.generateRelations(zip, this._rel);\r\n        await bulletsNumbering.generateNumbering(zip, this._numbering);\r\n        await Style.generateStyles(zip, this._style);\r\n\r\n        zip.file('word/document.xml', xmlString);\r\n\r\n        return await zip.generateAsync({\r\n            type: type,\r\n            compression: 'DEFLATE',\r\n            compressionOptions: {\r\n                level: 4\r\n            }\r\n        })\r\n    };\r\n}\r\n\r\nmodule.exports = DocxMerger;\r\n"],
  "mappings": "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",
  "names": ["require_merge_styles", "__commonJSMin", "exports", "module", "XMLSerializer", "DOMParser", "prepareStyles", "files", "style", "serializer", "prepare", "zip", "index", "xmlString", "xml", "nodes", "node", "styleId", "basedonStyle", "basedonStyleId", "w_next", "w_next_ID", "w_link", "w_link_ID", "numId", "numId_ID", "updateStyleRel_Content", "startIndex", "mergeStyles", "_styles", "merge", "fileIndex", "generateStyles", "_style", "endIndex", "require_merge_media", "__commonJSMin", "exports", "module", "XMLSerializer", "DOMParser", "prepareMediaFiles", "files", "media", "gCount", "prepare", "zip", "index", "medFiles", "mfile", "count", "updateMediaRelations", "updateMediaContent", "_media", "xmlString", "xml", "childNodes", "serializer", "node", "startIndex", "copyMediaFiles", "base", "_files", "content", "require_merge_relations_and_content_type", "__commonJSMin", "exports", "module", "XMLSerializer", "DOMParser", "mergeContentTypes", "files", "_contentTypes", "merge", "zip", "xmlString", "childNodes", "node", "contentType", "mergeRelations", "_rel", "Id", "generateContentTypes", "xml", "serializer", "types", "startIndex", "generateRelations", "require_merge_bullets_numberings", "__commonJSMin", "exports", "module", "XMLSerializer", "DOMParser", "prepareNumbering", "files", "serializer", "prepare", "zip", "index", "xmlBin", "xmlString", "xml", "nodes", "node", "absID", "pStyles", "pStyle", "pStyleId", "numStyleLinks", "numstyleLink", "styleLinkId", "styleLinks", "styleLink", "numNodes", "ID", "absrefID", "i", "iId", "startIndex", "mergeNumbering", "_numbering", "merge", "generateNumbering", "endIndex", "import_jszip", "import_merge_styles", "import_merge_media", "import_merge_relations_and_content_type", "import_merge_bullets_numberings", "DocxMerger", "__publicField", "pb", "xml", "options", "files", "file", "JSZip", "RelContentType", "Media", "bulletsNumbering", "Style", "merge", "zip", "index", "xmlString", "type", "startIndex", "endIndex"]
}

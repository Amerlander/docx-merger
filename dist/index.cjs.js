var F=Object.create;var g=Object.defineProperty;var z=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var D=Object.getPrototypeOf,k=Object.prototype.hasOwnProperty;var L=(r,e)=>{for(var t in e)g(r,t,{get:e[t],enumerable:!0})},f=(r,e,t,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of A(e))!k.call(r,n)&&n!==t&&g(r,n,{get:()=>e[n],enumerable:!(i=z(e,n))||i.enumerable});return r};var y=(r,e,t)=>(t=r!=null?F(D(r)):{},f(e||!r||!r.__esModule?g(t,"default",{value:r,enumerable:!0}):t,r)),X=r=>f(g({},"__esModule",{value:!0}),r);var $={};L($,{default:()=>q});module.exports=X($);var E=y(require("jszip"));var d=require("@xmldom/xmldom"),u=async function(r,e){let t=r.map(async i=>{let n=await i.file("word/styles.xml").async("string"),l=new d.DOMParser().parseFromString(n,"text/xml").documentElement.childNodes;for(let o=0;o<l.length;o++)if(l[o].nodeType===1){let a=l[o].getAttribute("w:styleId");e[a]||(e[a]=l[o].cloneNode(!0))}});return Promise.all(t)},x=async function(r,e){let t=r.map(async i=>{let n=await i.file("word/styles.xml").async("string"),s=new d.DOMParser().parseFromString(n,"text/xml"),l=new d.XMLSerializer,o=s.documentElement.cloneNode();for(let w in e)o.appendChild(e[w]);let a=n.indexOf("<w:styles");n=n.replace(n.slice(a),l.serializeToString(o)),i.file("word/styles.xml",n)});return Promise.all(t)};var h=async function(r,e){let t=await r.file("word/styles.xml").async("string"),i=t.indexOf("<w:style "),n=t.indexOf("</w:styles>");t=t.replace(t.slice(i,n),e.join("")),r.file("word/styles.xml",t)};var b=y(require("jszip")),S=require("@xmldom/xmldom");async function _(r,e){for(let t of r){let n=(await new b.default().loadAsync(t)).folder("word/media");n&&n.forEach((s,l)=>{e[s]=l})}}async function N(r,e,t){let i=r.folder("word/media");if(!i)throw new Error("Media folder not found in the zip");for(let[n,s]of Object.entries(e)){let l=await s.async("blob");i.file(n,l)}}var c=require("@xmldom/xmldom"),T=function(r,e){let t=r.map(async i=>{let n=await i.file("[Content_Types].xml").async("string"),l=new c.DOMParser().parseFromString(n,"text/xml").getElementsByTagName("Types")[0].childNodes;for(let o in l)if(/^\d+$/.test(o)&&l[o].getAttribute){let a=l[o].getAttribute("ContentType");e[a]||(e[a]=l[o].cloneNode())}});return Promise.all(t)},I=async function(r,e){let t=r.map(async i=>{let n=await i.file("word/_rels/document.xml.rels").async("string"),l=new c.DOMParser().parseFromString(n,"text/xml").documentElement.childNodes;for(let o=0;o<l.length;o++)if(l[o].nodeType===1){let a=l[o].getAttribute("Id");e[a]||(e[a]=l[o].cloneNode())}});return Promise.all(t)},M=async function(r,e){let t=await r.file("[Content_Types].xml").async("string"),i=new c.DOMParser().parseFromString(t,"text/xml"),n=new c.XMLSerializer,s=i.documentElement.cloneNode();for(let o in e)s.appendChild(e[o]);let l=t.indexOf("<Types");t=t.replace(t.slice(l),n.serializeToString(s)),r.file("[Content_Types].xml",t)},O=async function(r,e){let t=await r.file("word/_rels/document.xml.rels").async("string"),i=new c.DOMParser().parseFromString(t,"text/xml"),n=new c.XMLSerializer,s=i.documentElement.cloneNode();for(let o in e)s.appendChild(e[o]);let l=t.indexOf("<Relationships");t=t.replace(t.slice(l),n.serializeToString(s)),r.file("word/_rels/document.xml.rels",t)};var H=require("jszip"),m=require("@xmldom/xmldom");async function P(r,e){let t=r.map(async i=>{let n=await i.file("word/numbering.xml").async("string"),l=new m.DOMParser().parseFromString(n,"text/xml").documentElement.childNodes;for(let o=0;o<l.length;o++)if(l[o].nodeType===1){let a=l[o].getAttribute("w:abstractNumId");e[a]||(e[a]=l[o].cloneNode(!0))}e.push(n)});return Promise.all(t)}async function R(r,e){let t=r.map(async i=>{let n=await i.file("word/numbering.xml").async("string"),s=new m.DOMParser().parseFromString(n,"text/xml"),l=new m.XMLSerializer,o=s.documentElement.cloneNode();for(let w in e)o.appendChild(e[w]);let a=n.indexOf("<w:numbering");n=n.replace(n.slice(a),l.serializeToString(o)),i.file("word/numbering.xml",n)});return Promise.all(t)}async function C(r,e){let t=r.file("word/numbering.xml");if(!t)throw new Error("Numbering file not found in the zip");let i=await t.async("string"),n=i.indexOf("<w:abstractNum "),s=i.indexOf("</w:numbering>");i=i.replace(i.slice(n,s),e.join("")),r.file("word/numbering.xml",i)}var B=typeof window!="undefined"&&typeof window.document!="undefined",Q=B?window.XMLSerializer:require("@xmldom/xmldom").XMLSerializer,U=B?window.DOMParser:require("@xmldom/xmldom").DOMParser,p=class{constructor(){this._body=[],this._header=[],this._footer=[],this._pageBreak=!0,this._Basestyle="source",this._style=[],this._numbering=[],this._files=[],this._contentTypes={},this._media={},this._rel={},this._builder=this._body}async initialize(e={},t){t=t||[],this._pageBreak=typeof e.pageBreak!="undefined"?!!e.pageBreak:!0,this._Basestyle=e.style||"source";for(let i of t){let n=await new E.default().loadAsync(i);this._files.push(n)}this._files.length>0&&await this.mergeBody(this._files)}insertPageBreak(){let e='<w:p>                     <w:r>                         <w:br w:type="page"/>                     </w:r>                 </w:p>';this._builder.push(e)}insertSectionBreak(){let e='<w:p>                     <w:pPr>                         <w:sectPr>                             <w:type w:val="nextPage"/>                         </w:sectPr>                     </w:pPr>                 </w:p>';this._builder.push(e)}insertRaw(e){this._builder.push(e)}async mergeBody(e){this._builder=this._body,await T(e,this._contentTypes),await _(e,this._media),await I(e,this._rel),await P(e,this._numbering),await R(e,this._numbering),await u(e,this._style),await x(e,this._style);let t=e.map(async(i,n)=>{let s=await i.file("word/document.xml").async("string");s=s.substring(s.indexOf("<w:body>")+8),s=s.substring(0,s.indexOf("</w:body>")),s=s.substring(0,s.lastIndexOf("<w:sectPr")),this.insertRaw(s),this._pageBreak&&n<e.length-1&&this.insertSectionBreak()});return Promise.all(t).then(()=>{})}async save(e){let t=this._files[0];if(!t||!t.file)throw new Error("JSZip file not properly loaded");let i=await t.file("word/document.xml").async("string"),n=i.indexOf("<w:body>")+8,s=i.lastIndexOf("<w:sectPr");return i=i.replace(i.slice(n,s),this._body.join("")),await M(t,this._contentTypes),await N(t,this._media,this._files),await O(t,this._rel),await C(t,this._numbering),await h(t,this._style),t.file("word/document.xml",i),await t.generateAsync({type:e,compression:"DEFLATE",compressionOptions:{level:4}})}},q=p;
//# sourceMappingURL=index.cjs.js.map

var B=Object.create;var g=Object.defineProperty;var z=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var D=Object.getPrototypeOf,L=Object.prototype.hasOwnProperty;var k=(r,e)=>{for(var t in e)g(r,t,{get:e[t],enumerable:!0})},f=(r,e,t,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of A(e))!L.call(r,n)&&n!==t&&g(r,n,{get:()=>e[n],enumerable:!(i=z(e,n))||i.enumerable});return r};var y=(r,e,t)=>(t=r!=null?B(D(r)):{},f(e||!r||!r.__esModule?g(t,"default",{value:r,enumerable:!0}):t,r)),X=r=>f(g({},"__esModule",{value:!0}),r);var $={};k($,{default:()=>q});module.exports=X($);var E=y(require("jszip"));var d=require("@xmldom/xmldom"),u=async function(r,e){let t=r.map(async i=>{let n=await i.file("word/styles.xml").async("string"),o=new d.DOMParser().parseFromString(n,"text/xml").documentElement.childNodes;for(let s=0;s<o.length;s++)if(o[s].nodeType===1){let a=o[s].getAttribute("w:styleId");e[a]||(e[a]=o[s].cloneNode(!0))}});return Promise.all(t)},x=async function(r,e){let t=r.map(async i=>{let n=await i.file("word/styles.xml").async("string"),l=new d.DOMParser().parseFromString(n,"text/xml"),o=new d.XMLSerializer,s=l.documentElement.cloneNode();for(let w in e)s.appendChild(e[w]);let a=n.indexOf("<w:styles");n=n.replace(n.slice(a),o.serializeToString(s)),i.file("word/styles.xml",n)});return Promise.all(t)};var h=async function(r,e){let t=await r.file("word/styles.xml").async("string"),i=t.indexOf("<w:style "),n=t.indexOf("</w:styles>");t=t.replace(t.slice(i,n),e.join("")),r.file("word/styles.xml",t)};var b=y(require("jszip")),S=require("@xmldom/xmldom");async function _(r,e){for(let t of r){let n=(await new b.default().loadAsync(t)).folder("word/media");n&&n.forEach((l,o)=>{e[l]=o})}}async function N(r,e,t){let i=r.folder("word/media");if(!i)throw new Error("Media folder not found in the zip");for(let[n,l]of Object.entries(e)){let o=await l.async("blob");i.file(n,o)}}var c=require("@xmldom/xmldom"),T=function(r,e){let t=r.map(async i=>{let n=await i.file("[Content_Types].xml").async("string"),o=new c.DOMParser().parseFromString(n,"text/xml").getElementsByTagName("Types")[0].childNodes;for(let s in o)if(/^\d+$/.test(s)&&o[s].getAttribute){let a=o[s].getAttribute("ContentType");e[a]||(e[a]=o[s].cloneNode())}});return Promise.all(t)},I=async function(r,e){let t=r.map(async i=>{let n=await i.file("word/_rels/document.xml.rels").async("string"),o=new c.DOMParser().parseFromString(n,"text/xml").documentElement.childNodes;for(let s=0;s<o.length;s++)if(o[s].nodeType===1){let a=o[s].getAttribute("Id");e[a]||(e[a]=o[s].cloneNode())}});return Promise.all(t)},M=async function(r,e){let t=await r.file("[Content_Types].xml").async("string"),i=new c.DOMParser().parseFromString(t,"text/xml"),n=new c.XMLSerializer,l=i.documentElement.cloneNode();for(let s in e)l.appendChild(e[s]);let o=t.indexOf("<Types");t=t.replace(t.slice(o),n.serializeToString(l)),r.file("[Content_Types].xml",t)},O=async function(r,e){let t=await r.file("word/_rels/document.xml.rels").async("string"),i=new c.DOMParser().parseFromString(t,"text/xml"),n=new c.XMLSerializer,l=i.documentElement.cloneNode();for(let s in e)l.appendChild(e[s]);let o=t.indexOf("<Relationships");t=t.replace(t.slice(o),n.serializeToString(l)),r.file("word/_rels/document.xml.rels",t)};var H=require("jszip"),m=require("@xmldom/xmldom");async function P(r,e){let t=r.map(async i=>{let n=await i.file("word/numbering.xml").async("string"),o=new m.DOMParser().parseFromString(n,"text/xml").documentElement.childNodes;for(let s=0;s<o.length;s++)if(o[s].nodeType===1){let a=o[s].getAttribute("w:abstractNumId");e[a]||(e[a]=o[s].cloneNode(!0))}e.push(n)});return Promise.all(t)}async function R(r,e){let t=r.map(async i=>{let n=await i.file("word/numbering.xml").async("string"),l=new m.DOMParser().parseFromString(n,"text/xml"),o=new m.XMLSerializer,s=l.documentElement.cloneNode();for(let w in e)s.appendChild(e[w]);let a=n.indexOf("<w:numbering");n=n.replace(n.slice(a),o.serializeToString(s)),i.file("word/numbering.xml",n)});return Promise.all(t)}async function C(r,e){let t=r.file("word/numbering.xml");if(!t)throw new Error("Numbering file not found in the zip");let i=await t.async("string"),n=i.indexOf("<w:abstractNum "),l=i.indexOf("</w:numbering>");i=i.replace(i.slice(n,l),e.join("")),r.file("word/numbering.xml",i)}var F=typeof window!="undefined"&&typeof window.document!="undefined",Q=F?window.XMLSerializer:require("@xmldom/xmldom").XMLSerializer,U=F?window.DOMParser:require("@xmldom/xmldom").DOMParser,p=class{constructor(){this._body=[],this._header=[],this._footer=[],this._pageBreak=!0,this._Basestyle="source",this._style=[],this._numbering=[],this._files=[],this._contentTypes={},this._media={},this._rel={},this._builder=this._body}async initialize(e={},t){t=t||[],this._pageBreak=typeof e.pageBreak!="undefined"?!!e.pageBreak:!0,this._Basestyle=e.style||"source";for(let i of t){let n=await new E.default().loadAsync(i);this._files.push(n)}this._files.length>0&&await this.mergeBody(this._files)}insertPageBreak(){let e='<w:p>                     <w:r>                         <w:br w:type="page"/>                     </w:r>                 </w:p>';this._builder.push(e)}insertSectionBreak(){let e='<w:p>                     <w:pPr>                         <w:sectPr>                             <w:type w:val="nextPage"/>                         </w:sectPr>                     </w:pPr>                 </w:p>';this._builder.push(e)}insertRaw(e){this._builder.push(e)}async mergeBody(e){this._builder=this._body,await T(e,this._contentTypes),await _(e,this._media),await I(e,this._rel),await P(e,this._numbering),await R(e,this._numbering),await u(e,this._style),await x(e,this._style);let t=e.map(async(i,n)=>{let l=await i.file("word/document.xml").async("string");l=l.substring(l.indexOf("<w:body>")+8),l=l.substring(0,l.indexOf("</w:body>")),l=l.substring(0,l.lastIndexOf("<w:sectPr")),this.insertRaw(l),this._pageBreak&&n<e.length-1&&this.insertSectionBreak()});return Promise.all(t).then(()=>{})}async save(e,t){let i=this._files[0];if(!i||!i.file)throw new Error("JSZip file not properly loaded");let n=await i.file("word/document.xml").async("string"),l=n.indexOf("<w:body>")+8,o=n.lastIndexOf("<w:sectPr");n=n.replace(n.slice(l,o),this._body.join("")),await M(i,this._contentTypes),await N(i,this._media,this._files),await O(i,this._rel),await C(i,this._numbering),await h(i,this._style),i.file("word/document.xml",n);let s=await i.generateAsync({type:e,compression:"DEFLATE",compressionOptions:{level:4}});return t&&t(s),s}},q=p;
//# sourceMappingURL=index.cjs.js.map
